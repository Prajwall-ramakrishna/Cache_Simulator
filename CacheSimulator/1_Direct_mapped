#include <iostream>
#include <vector>
#include <cmath>
#include <bitset>
#include <unordered_set>
using namespace std;

struct CacheLine{
    bool valid;
    unsigned int tag;
};

class CacheSimulator {
  int cache_size;
  int block_size;
  vector<CacheLine> cache;
  int hits = 0, misses = 0;
  int compulosry_miss = 0, conflict_miss = 0;
  unordered_set<unsigned int> unique_tags;

public:  
      CacheSimulator(int size, int blocksize){
          cache_size = size;
          block_size = blocksize;
          cache = vector<CacheLine>(size);
          for(auto &line: cache){
              line.valid = false;
          }
      }
      
      void access(unsigned int addr){
          int offset_bits = log2(block_size);
          int index_bits = log2(cache_size);
          unsigned int index = (addr >> offset_bits) & (cache_size-1);
          unsigned int tag = addr >> index_bits;
          
          bitset<32> addr_bits(addr);
          bitset<32> tag_bits(tag);

          cout << "Accessing address: " << addr_bits
             << ", Tag: " << tag_bits
             << ", Index: " << index << endl;
          
          if (cache[index].valid && cache[index].tag == tag){
              hits++;
              cout<<"Hit"<<endl;
          } else {
              misses++;
              cache[index].valid = true;
              cache[index].tag = tag;
              if(unique_tags.find(tag) == unique_tags.end()){
                  compulosry_miss++;
                  unique_tags.insert(tag);
              } else {
                  conflict_miss++;
              }
          }
      }
      
      void printStats(){
           cout<<"Hits: "<<hits<<", Misses: "<<misses<<endl;
           cout<<"compulosry_miss: "<<compulosry_miss<<", conflict_miss: "<<conflict_miss<<endl;

      }
};

int main() {
    
    CacheSimulator sim(32,4);
    vector<unsigned int> trace = { 0x00000010, 0x00000011, 0x00000010, 0x000000AA, 0x000000FF, 0x0000001F, 0x000000AA};
    for(auto addr: trace){
        sim.access(addr);
    }
    
    sim.printStats();

    return 0;
}
